/**
Code for the PyTorch implementation of
"DeepFocus: a Few-Shot Microscope Slide Auto-Focus using a Sample-invariant CNN-based Sharpness Function"

Copyright (c) 2020 Idiap Research Institute, http://www.idiap.ch/
Written by Adrian Shajkofci <adrian.shajkofci@idiap.ch>,
All rights reserved.

This file is part of DeepFocus.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. Neither the name of mosquitto nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
*/

package ch.idiap.cbi;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;

import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.Observable;
import javax.swing.Timer;

import java.util.Observer;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileSystemView;

import org.micromanager.Studio;
import org.micromanager.internal.utils.MMFrame;

import mmcorej.StrVector;
import mmcorej.DeviceType;

public class DeepFocusGUIFrame extends MMFrame implements Observer {

    private Studio _studio;
    private DeepFocusScripting _calib;
    private String _calibrationCurveFilename;
    private String _notify;
    private boolean _isPathChosen;

    /**
     * Creates new form DeepFocusGUI_Frame2
     */
    public DeepFocusGUIFrame(Studio studio) {
        super("DeepFocus GUI");

        initComponents();

        _studio = studio;
        
        StrVector zDrives = _studio.getCMMCore().getLoadedDevicesOfType(DeviceType.StageDevice);

        _calib = new DeepFocusScripting(_studio);
        
        for (int i = 0; i < zDrives.size(); i++){
            String drive = zDrives.get(i);
            zDrivesSelect_.addItem(drive);
            _calib.setZMotor(drive);
        }
        _calib.addObserver(this);

        calibStartZ_txt.setText("" + Math.round(-10 + _calib.getZPosition()));
        calibEndZ_txt.setText("" + Math.round(10 + _calib.getZPosition()));
        calibStepSize_txt.setText("1");

        _calibrationCurveFilename = "";
        _isPathChosen = false;
        initInfo();
        _studio.events().registerForEvents(this);
        updateSteps();
        calib_button.setEnabled(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        deepFocusCalibrationPanel = new javax.swing.JPanel();
        settings_panel = new javax.swing.JPanel();
        calibStartZ_label = new javax.swing.JLabel();
        calibEndZ_label = new javax.swing.JLabel();
        calibStepSize_label = new javax.swing.JLabel();
        calibStartZ_txt = new javax.swing.JTextField();
        calibEndZ_txt = new javax.swing.JTextField();
        calibStepSize_txt = new javax.swing.JTextField();
        setStartZ_button = new javax.swing.JButton();
        setEndZ_button = new javax.swing.JButton();
        numSteps_txt = new javax.swing.JTextField();
        calib_button = new javax.swing.JButton();
        calibPathway_button = new javax.swing.JButton();
        zDrivesSelect_ = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        info_panel = new javax.swing.JPanel();
        info_scrollPanel = new javax.swing.JScrollPane();
        info_txtArea = new javax.swing.JTextArea();

        javax.swing.GroupLayout deepFocusCalibrationPanelLayout = new javax.swing.GroupLayout(deepFocusCalibrationPanel);
        deepFocusCalibrationPanel.setLayout(deepFocusCalibrationPanelLayout);
        deepFocusCalibrationPanelLayout.setHorizontalGroup(
            deepFocusCalibrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        deepFocusCalibrationPanelLayout.setVerticalGroup(
            deepFocusCalibrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DeepFocus");
        setResizable(false);

        settings_panel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Calibration Settings", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 16))); // NOI18N
        settings_panel.setFocusable(false);
        settings_panel.setFont(settings_panel.getFont().deriveFont(settings_panel.getFont().getStyle() | java.awt.Font.BOLD, settings_panel.getFont().getSize()+2));

        calibStartZ_label.setFont(calibStartZ_label.getFont().deriveFont(calibStartZ_label.getFont().getStyle() & ~java.awt.Font.BOLD, calibStartZ_label.getFont().getSize()+2));
        calibStartZ_label.setLabelFor(calibStartZ_txt);
        calibStartZ_label.setText("Start Z Position");

        calibEndZ_label.setFont(calibEndZ_label.getFont().deriveFont(calibEndZ_label.getFont().getStyle() & ~java.awt.Font.BOLD, calibEndZ_label.getFont().getSize()+2));
        calibEndZ_label.setLabelFor(calibEndZ_txt);
        calibEndZ_label.setText("End Z Position");

        calibStepSize_label.setFont(calibStepSize_label.getFont().deriveFont(calibStepSize_label.getFont().getStyle() & ~java.awt.Font.BOLD, calibStepSize_label.getFont().getSize()+2));
        calibStepSize_label.setLabelFor(calibStepSize_txt);
        calibStepSize_label.setText("Step Size");

        calibStartZ_txt.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        calibStartZ_txt.setToolTipText("");
        calibStartZ_txt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                calibStartZ_txtKeyReleased(evt);
            }
        });

        calibEndZ_txt.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        calibEndZ_txt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                calibEndZ_txtKeyReleased(evt);
            }
        });

        calibStepSize_txt.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        calibStepSize_txt.setToolTipText("");
        calibStepSize_txt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                calibStepSize_txtKeyReleased(evt);
            }
        });

        setStartZ_button.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        setStartZ_button.setForeground(new java.awt.Color(0, 0, 102));
        setStartZ_button.setText("Set Start");
        setStartZ_button.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setStartZ_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setStartZ_buttonActionPerformed(evt);
            }
        });

        setEndZ_button.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        setEndZ_button.setForeground(new java.awt.Color(0, 0, 102));
        setEndZ_button.setText("Set End");
        setEndZ_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setEndZ_buttonActionPerformed(evt);
            }
        });

        numSteps_txt.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        numSteps_txt.setText("# Steps");

        calib_button.setFont(calib_button.getFont().deriveFont(calib_button.getFont().getStyle() & ~java.awt.Font.BOLD, calib_button.getFont().getSize()+2));
        calib_button.setForeground(new java.awt.Color(204, 0, 51));
        calib_button.setText("Calibrate");
        calib_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calib_buttonActionPerformed(evt);
            }
        });

        calibPathway_button.setFont(calibPathway_button.getFont().deriveFont(calibPathway_button.getFont().getStyle() & ~java.awt.Font.BOLD, calibPathway_button.getFont().getSize()+2));
        calibPathway_button.setText("Set output directory");
        calibPathway_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calibPathway_buttonActionPerformed(evt);
            }
        });

        zDrivesSelect_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zDrivesSelect_ActionPerformed(evt);
            }
        });

        jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getStyle() & ~java.awt.Font.BOLD, jLabel1.getFont().getSize()+2));
        jLabel1.setLabelFor(zDrivesSelect_);
        jLabel1.setText("Z stage");

        javax.swing.GroupLayout settings_panelLayout = new javax.swing.GroupLayout(settings_panel);
        settings_panel.setLayout(settings_panelLayout);
        settings_panelLayout.setHorizontalGroup(
            settings_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settings_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settings_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(settings_panelLayout.createSequentialGroup()
                        .addComponent(calibPathway_button, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(calib_button))
                    .addGroup(settings_panelLayout.createSequentialGroup()
                        .addGroup(settings_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(settings_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(settings_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(calibStartZ_label)
                                    .addComponent(calibEndZ_label, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(calibStepSize_label, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(settings_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(zDrivesSelect_, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(settings_panelLayout.createSequentialGroup()
                                .addGroup(settings_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(settings_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(calibEndZ_txt)
                                        .addComponent(calibStartZ_txt, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE))
                                    .addComponent(calibStepSize_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(21, 21, 21)
                                .addGroup(settings_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(setEndZ_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(setStartZ_button, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                                    .addComponent(numSteps_txt))))))
                .addContainerGap())
        );
        settings_panelLayout.setVerticalGroup(
            settings_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settings_panelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(settings_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(zDrivesSelect_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(settings_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(calibStartZ_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setStartZ_button)
                    .addComponent(calibStartZ_label, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(settings_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(calibEndZ_label)
                    .addComponent(calibEndZ_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setEndZ_button))
                .addGap(18, 18, 18)
                .addGroup(settings_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(calibStepSize_label)
                    .addComponent(calibStepSize_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numSteps_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addGroup(settings_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(calibPathway_button)
                    .addComponent(calib_button)))
        );

        info_panel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Calibration Info", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 16))); // NOI18N
        info_panel.setFont(info_panel.getFont());

        info_txtArea.setColumns(20);
        info_txtArea.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        info_txtArea.setRows(5);
        info_scrollPanel.setViewportView(info_txtArea);

        javax.swing.GroupLayout info_panelLayout = new javax.swing.GroupLayout(info_panel);
        info_panel.setLayout(info_panelLayout);
        info_panelLayout.setHorizontalGroup(
            info_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(info_scrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE)
        );
        info_panelLayout.setVerticalGroup(
            info_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(info_scrollPanel)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(settings_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(info_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(info_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(settings_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setStartZ_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setStartZ_buttonActionPerformed
        calibStartZ_txt.setText("" + Math.round(_calib.getZPosition()));
        updateSteps();
    }//GEN-LAST:event_setStartZ_buttonActionPerformed

    private void setEndZ_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setEndZ_buttonActionPerformed
        calibEndZ_txt.setText("" + Math.round(_calib.getZPosition()));
        updateSteps();
    }//GEN-LAST:event_setEndZ_buttonActionPerformed

    private void calib_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calib_buttonActionPerformed

        final boolean inputIsOk = inputErrorCheck(false);

        if (inputIsOk) {
            if (_isPathChosen) {
                numSteps_txt.setText((int) ((Math.floor((Double.parseDouble(calibEndZ_txt.getText()) - Double.parseDouble(calibStartZ_txt.getText())) / Double.parseDouble(calibStepSize_txt.getText()))) + 1) + " Steps");

                ActionListener taskPerformer;
                taskPerformer = new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        _notify = "TaskPerfomer";

                        try {
                            _calib.acquireSendZStack(Double.parseDouble(calibStartZ_txt.getText()),
                                    Double.parseDouble(calibEndZ_txt.getText()),
                                    Double.parseDouble(calibStepSize_txt.getText()),
                                    _calibrationCurveFilename);
                            _notify = "";

                        } catch (InterruptedException ex) {
                            Logger.getLogger(DeepFocusGUIFrame.class.getName()).log(Level.SEVERE, null, ex);
                            _notify = "InterruptedException";
                        } catch (IOException ex) {
                            Logger.getLogger(DeepFocusGUIFrame.class.getName()).log(Level.SEVERE, null, ex);
                            _notify = "IOException";
                        }
                    }
                };
                Timer timer = new Timer(1000, taskPerformer);
                timer.setRepeats(false);
                timer.start();
            } else {
                info_txtArea.append("\nERROR: No directory selected: \n-Please select directory to save calibration!");
            }
        } else {
            calibStartZ_txt.setText("");
            calibEndZ_txt.setText("");
            calibStepSize_txt.setText("");
            numSteps_txt.setText("");
        }
    }//GEN-LAST:event_calib_buttonActionPerformed

    private void calibPathway_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calibPathway_buttonActionPerformed
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        jfc.setDialogTitle("Choose a directory to save calibration: ");
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int returnValue = jfc.showSaveDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            if (jfc.getSelectedFile().isDirectory()) {
                info_txtArea.setText("You selected the directory: " + jfc.getSelectedFile());
                _calibrationCurveFilename = jfc.getSelectedFile().toString();
                _isPathChosen = true;
            }

            calib_button.setEnabled(true);

        }    }//GEN-LAST:event_calibPathway_buttonActionPerformed

    private void calibStartZ_txtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_calibStartZ_txtKeyReleased
        updateSteps();
    }//GEN-LAST:event_calibStartZ_txtKeyReleased

    private void calibEndZ_txtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_calibEndZ_txtKeyReleased
        updateSteps();
    }//GEN-LAST:event_calibEndZ_txtKeyReleased

    private void calibStepSize_txtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_calibStepSize_txtKeyReleased
        updateSteps();
    }//GEN-LAST:event_calibStepSize_txtKeyReleased

    private void zDrivesSelect_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zDrivesSelect_ActionPerformed
        _calib.setZMotor((String)zDrivesSelect_.getSelectedItem());
    }//GEN-LAST:event_zDrivesSelect_ActionPerformed

    private void updateSteps() {
        if (inputErrorCheck(true)) {
            numSteps_txt.setText((int) ((Math.floor((Double.parseDouble(calibEndZ_txt.getText()) - Double.parseDouble(calibStartZ_txt.getText())) / Double.parseDouble(calibStepSize_txt.getText()))) + 1) + " Steps");
        } else {
            numSteps_txt.setText("# Steps");
        }
    }

    private boolean inputErrorCheck(boolean isStepSizeCheck) {
        String s = "";
        String loc = "";
        String infoTxt = "";
        Boolean err = false;
        for (int s_index = 0; s_index < 3; s_index++) {
            if (s_index == 0) {
                s = calibStartZ_txt.getText();
                loc = "Start Z Position";
            } else if (s_index == 1) {
                s = calibEndZ_txt.getText();
                loc = "End Z Position";
            } else {
                s = calibStepSize_txt.getText();
                loc = "Step Size";
            }

            if (s.isEmpty()) {
                infoTxt = infoTxt + "\nERROR: Undesired Input: \n-Empty Input at " + loc + "\n-Please enter only number values!";
                err = true;
            } else {
                try {
                    Double.parseDouble(s);

                } catch (NumberFormatException e) {
                    //not a double
                    infoTxt = infoTxt + "\nERROR: Undesired Input: \n-Not a numeric input at " + loc + "\n-Please enter only numeric values!";
                    err = true;
                }
            }
        }
        if (!err) {
            if (Double.parseDouble(calibStartZ_txt.getText()) > Double.parseDouble(calibEndZ_txt.getText())) {
                infoTxt = "\nERROR: Wrong order of positions: \n-Start Z Position is greater than End Z Position \n-Please enter in the reverse order";
                err = true;
            } else if (((int) ((Math.floor((Double.parseDouble(calibEndZ_txt.getText()) - Double.parseDouble(calibStartZ_txt.getText())) / Double.parseDouble(calibStepSize_txt.getText()))) + 1) < 11)) {
                infoTxt = "\nERROR: Not Enough Steps: \n-Given input provides less then 11 \n-Please enter input accordingly!";
                err = true;
            }
        }

        if (err && !isStepSizeCheck) {
            info_txtArea.append(infoTxt);
        }

        return !err;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel calibEndZ_label;
    private javax.swing.JTextField calibEndZ_txt;
    private javax.swing.JButton calibPathway_button;
    private javax.swing.JLabel calibStartZ_label;
    private javax.swing.JTextField calibStartZ_txt;
    private javax.swing.JLabel calibStepSize_label;
    private javax.swing.JTextField calibStepSize_txt;
    private javax.swing.JButton calib_button;
    private javax.swing.JPanel deepFocusCalibrationPanel;
    private javax.swing.JPanel info_panel;
    private javax.swing.JScrollPane info_scrollPanel;
    private javax.swing.JTextArea info_txtArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField numSteps_txt;
    private javax.swing.JButton setEndZ_button;
    private javax.swing.JButton setStartZ_button;
    private javax.swing.JPanel settings_panel;
    private javax.swing.JComboBox<String> zDrivesSelect_;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg) {
        final String[] arg_ = (String[])arg;
        info_txtArea.append("\n" + arg_[1]);
        if (Integer.valueOf((String)arg_[0]) == 6)
            showCalibrationInfo();
        _studio.logs().logMessage(arg_[1]);
    }

    private void showCalibrationInfo() {
        DecimalFormat formatter = new DecimalFormat("#0.00000");
        DecimalFormatSymbols formatter_symb = formatter.getDecimalFormatSymbols();
        formatter_symb.setDecimalSeparator('.');
        formatter.setDecimalFormatSymbols(formatter_symb);
        info_txtArea.append("\n" + _notify);
        //info_txtArea.append("\n" + _notify + "\n G2C:" + formatter.format(_calib.getGaussian2Center()) + "\n PC:"
        //        + formatter.format(_calib.getPeakCenter()) + "\n G2S:" + formatter.format(_calib.getGaussian2Sigma())
        //        + "\n PS:" + formatter.format(_calib.getPeakSigma()) + "\n Constant_c:" + formatter.format(_calib.getConstantC()));
    }

    private void initInfo() {
        info_txtArea.setText("Minimum 11 Steps are Required! \nPlease Choose a Directory to Save Calibration and Calibration Curve Image");
    }
    
    @Override
    public void dispose() {
        super.dispose();
    }
}
